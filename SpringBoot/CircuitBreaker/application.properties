// use this to configure your circuit breaker
#resilience4j
resilience4j.circuitbreaker.instances.circuitBreakerName.registerHealthIndicator= true
resilience4j.circuitbreaker.instances.circuitBreakerName.slidingWindowSize= 10 // this is the number of requests from client, if 5 failed it will close connection, you can change this too.
resilience4j.circuitbreaker.instances.circuitBreakerName.permittedNumberOfCallsInHalfOpenState= 3 // how many calls you want to allow to check if server is up
resilience4j.circuitbreaker.instances.circuitBreakerName.slidingWindowType= TIME_BASED
resilience4j.circuitbreaker.instances.circuitBreakerName.minimumNumberOfCalls= 5
resilience4j.circuitbreaker.instances.circuitBreakerName.waitDurationInOpenState= 5s // will wait 5 seconds, then it will check if the server is up
resilience4j.circuitbreaker.instances.circuitBreakerName.failureRateThreshold= 5 // it will try to connect to the server 5 times then it will close conection
resilience4j.circuitbreaker.instances.circuitBreakerName.eventConsumerBufferSize= 10 

resilience4j.retry.instances.circuitBreakerName.maxAttempts= 3 // this is the allowed connections to check if server is up, change this to number of attempt you want to make sure server is up
resilience4j.retry.instances.circuitBreakerName.waitDuration= 100s // it will wait 100 milliseconds between each retry
resilience4j.retry.instances.circuitBreakerName.enableExponentialBackoff= true
resilience4j.retry.instances.circuitBreakerName.exponentialBackoffMultiplier= 2
resilience4j.retry.instances.circuitBreakerName.retryExceptions=
                - org.springframework.web.client.HttpServerErrorException
                - java.io.IOException
resilience4j.retry.instances.circuitBreakerName.ignoreExceptions=
                - io.github.robwin.exception.BusinessException           

resilience4j.bulkhead.instances.circuitBreakerName.maxConcurrentCalls = 10
